{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-dev-hyd"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"Ls_dev_bs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Ls_dev_bs'"
		},
		"asql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asql'"
		},
		"asql_dt_st_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asql_dt_st'"
		},
		"az_db__adv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'az_db__adv'"
		},
		"az_db_adv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'az_db_adv'"
		},
		"copy_data_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'copy_data'"
		},
		"copy_database_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'copy_database'"
		},
		"ls_db_adv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_db_adv'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_DB_Organization')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_DB_Organization",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DB_Organization",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcOrganization": {},
									"TgtOrganization": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "VIjay"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-19T03:20:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_DB_Organization')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DB_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_DB_sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DB_sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dbsales": {},
									"dbtgtsales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-15T07:41:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_DB_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DB_medical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_DB_medical",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DB_medical",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dfsrcmedical": {},
									"dftgtmedical": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-15T09:08:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_DB_medical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Load_Date_Employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_DB_Employee",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DB_Employee",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcDbEmployee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "VIjay"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-21T09:21:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_DB_Employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_OnlineSales_Exp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_OnlineSales_DB_Exp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_OnlineSales_DB_Exp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcOnlinesales": {},
									"TgtOnlineSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "VIjay"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-20T09:40:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_OnlineSales_DB_Exp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Org_Drv_Selct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_bank_org",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_bank_org",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-20T03:12:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_bank_org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Org_Drv_Select')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Org_Drv_Selct",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Org_Drv_Selct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "VIjay"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-20T03:03:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Org_Drv_Selct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_copy_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_copy_california_health_2010",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_copy_california_health_2010",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Srccaliforniahealth2010": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_copy_california_health_2010')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_joiner_dept')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_JAINER",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_JAINER",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcdept": {},
									"srcemp": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T03:53:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_JAINER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_online_retail_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_online_sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_online_sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-21T03:17:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_online_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_org_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_bank_org",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_bank_org",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-19T03:45:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_bank_org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_sale_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_Org_csv_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Org",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Org",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_bank_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Index",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Index",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Website",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Website",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Founded",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Founded",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Industry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Industry",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Total_Employees",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Total_Employees",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_src_bank_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_tgt_bank_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_src_bank_csv')]",
				"[concat(variables('factoryId'), '/datasets/DS_tgt_bank_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_bank_csv_org')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_bank_org",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_bank_org",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-20T03:06:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_bank_org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_pp_cust')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_src_cust",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_tgt_cust",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_cust')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_cust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_18')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_new",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_new",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-20T03:04:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_24_join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_join_dept_customers25",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_join_dept_customers25",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T05:26:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_join_dept_customers25')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_copy_14')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T16:10:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dep_emp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_join_dept_employee",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_join_dept_employee",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T03:56:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_join_dept_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_join_25')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_24",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_24",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T09:48:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_24')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pp_src_org_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "pp_tgt_org_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp_src_org_csv')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipp1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pp1_src_org_csv1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "pp_tgt_org_csv1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp1_src_org_csv1')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_db_org')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_db_vorg_15042023",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_db_vorg_15042023",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-15T07:22:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_db_vorg_15042023')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_medical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow5",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"medical": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-18T05:42:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ramana')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csv_source_2011",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_tgt_2011",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T07:29:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_source_2011')]",
				"[concat(variables('factoryId'), '/datasets/csv_tgt_2011')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_Tgt_Org')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "banking",
					"table": "org"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_src_medical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Medical_Cost.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "sex",
						"type": "String"
					},
					{
						"name": "bmi",
						"type": "String"
					},
					{
						"name": "children",
						"type": "String"
					},
					{
						"name": "smoker",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "charges",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_src_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "USERID",
						"type": "String"
					},
					{
						"name": "ORDERDATE",
						"type": "String"
					},
					{
						"name": "ORDERID",
						"type": "String"
					},
					{
						"name": "AMOUNTINFO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_tgt_medical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "banking",
					"table": "medical"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DB_tgt_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "banking",
					"table": "sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnlineSales_Src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vijay"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "online-retail-dataset.csv",
						"container": "vijay-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "String"
					},
					{
						"name": "StockCode",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "InvoiceDate",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Org_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Src_California_health_2010')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "california_health_2010.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COUNTY",
						"type": "String"
					},
					{
						"name": "HOSPITAL",
						"type": "String"
					},
					{
						"name": "COMMENT LETTERS",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR    (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE (Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PCI\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PCI\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PCI\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PCI\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(Outlier Ratings)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Src_DB_Employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vijay"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empno",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ename",
						"type": "nvarchar"
					},
					{
						"name": "ejob",
						"type": "nvarchar"
					},
					{
						"name": "esalary",
						"type": "float",
						"precision": 15
					},
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "srcdata",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Src_organization')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vijay"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tgt_DB_DimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vijay"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ekey",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "empno",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ename",
						"type": "nvarchar"
					},
					{
						"name": "job",
						"type": "nvarchar"
					},
					{
						"name": "esalary",
						"type": "float",
						"precision": 15
					},
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "created_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "userid",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "tgtdata",
					"table": "Dimemployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tgt_DB_Onlinesales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vijay"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "invoiceno",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "stockcode",
						"type": "nvarchar"
					},
					{
						"name": "descriptions",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "invoicedate",
						"type": "nvarchar"
					},
					{
						"name": "unitprice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "customerid",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "banking",
					"table": "onlinesales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tgt_DB_Tgtdata_DimAsiaCountry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vijay"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Indexs",
						"type": "nvarchar"
					},
					{
						"name": "Names",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "Founded",
						"type": "nvarchar"
					},
					{
						"name": "Industry",
						"type": "nvarchar"
					},
					{
						"name": "Total_Employees",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "tgtdata",
					"table": "DimAsiacountry"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tgt_Org')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tgt_Organization')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vijay"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "index_no",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "orgname",
						"type": "nvarchar"
					},
					{
						"name": "website",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "orgdesc",
						"type": "nvarchar"
					},
					{
						"name": "founded",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "industry",
						"type": "nvarchar"
					},
					{
						"name": "total_employees",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "banking",
					"table": "organization"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_src_bank_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_src_bank_csv_copy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_src_bank_org')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_src_online_retail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "online-retail-dataset.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "String"
					},
					{
						"name": "StockCode",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "InvoiceDate",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_src_sales_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "california_health_2010.csv",
						"folderPath": "raw",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COUNTY",
						"type": "String"
					},
					{
						"name": "HOSPITAL",
						"type": "String"
					},
					{
						"name": "COMMENT LETTERS",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR    (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE (Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PCI\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PCI\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PCI\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PCI\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(Outlier Ratings)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_srcdata_dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "dname",
						"type": "nvarchar"
					},
					{
						"name": "dloc",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "srcdata ",
					"table": "dept"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_srcdata_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empno",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ename",
						"type": "nvarchar"
					},
					{
						"name": "ejob",
						"type": "nvarchar"
					},
					{
						"name": "esalary",
						"type": "float",
						"precision": 15
					},
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "srcdata",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tgt_bank')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "index_no",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "orgname",
						"type": "nvarchar"
					},
					{
						"name": "website",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "orgdesc",
						"type": "nvarchar"
					},
					{
						"name": "founded",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "industry",
						"type": "nvarchar"
					},
					{
						"name": "total_employees",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "banking",
					"table": "organization"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tgt_bank_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tgt_bank_csv_copy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tgt_online_retail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "invoiceno",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "stockcode",
						"type": "nvarchar"
					},
					{
						"name": "descriptions",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "invoicedate",
						"type": "nvarchar"
					},
					{
						"name": "unitprice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customerid",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "banking",
					"table": "onlinesales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tgt_sales_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tgt_stagging_california_health')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "neelima-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tgtdata_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ekey",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "empno",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ename",
						"type": "nvarchar"
					},
					{
						"name": "job",
						"type": "nvarchar"
					},
					{
						"name": "esalary",
						"type": "float",
						"precision": 15
					},
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "created_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "userid",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "tgtdata",
					"table": "dimemployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_tgt_bank_org')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Neelima_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "banking",
					"table": "organization"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_source_2011')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "california_health_2011.xlsx",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_tgt_2011')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "(Risk-Adjusted Mortality Rate)\"",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					},
					{
						"name": "Prop_9",
						"type": "String"
					},
					{
						"name": "Prop_10",
						"type": "String"
					},
					{
						"name": "Prop_11",
						"type": "String"
					},
					{
						"name": "Prop_12",
						"type": "String"
					},
					{
						"name": "Prop_13",
						"type": "String"
					},
					{
						"name": "Prop_14",
						"type": "String"
					},
					{
						"name": "Prop_15",
						"type": "String"
					},
					{
						"name": "Prop_16",
						"type": "String"
					},
					{
						"name": "Prop_17",
						"type": "String"
					},
					{
						"name": "Prop_18",
						"type": "String"
					},
					{
						"name": "Prop_19",
						"type": "String"
					},
					{
						"name": "Prop_20",
						"type": "String"
					},
					{
						"name": "Prop_21",
						"type": "String"
					},
					{
						"name": "Prop_22",
						"type": "String"
					},
					{
						"name": "Prop_23",
						"type": "String"
					},
					{
						"name": "Prop_24",
						"type": "String"
					},
					{
						"name": "Prop_25",
						"type": "String"
					},
					{
						"name": "Prop_26",
						"type": "String"
					},
					{
						"name": "Prop_27",
						"type": "String"
					},
					{
						"name": "Prop_28",
						"type": "String"
					},
					{
						"name": "Prop_29",
						"type": "String"
					},
					{
						"name": "Prop_30",
						"type": "String"
					},
					{
						"name": "Prop_31",
						"type": "String"
					},
					{
						"name": "Prop_32",
						"type": "String"
					},
					{
						"name": "Prop_33",
						"type": "String"
					},
					{
						"name": "Prop_34",
						"type": "String"
					},
					{
						"name": "Prop_35",
						"type": "String"
					},
					{
						"name": "Prop_36",
						"type": "String"
					},
					{
						"name": "Prop_37",
						"type": "String"
					},
					{
						"name": "Prop_38",
						"type": "String"
					},
					{
						"name": "Prop_39",
						"type": "String"
					},
					{
						"name": "Prop_40",
						"type": "String"
					},
					{
						"name": "Prop_41",
						"type": "String"
					},
					{
						"name": "Prop_42",
						"type": "String"
					},
					{
						"name": "Prop_43",
						"type": "String"
					},
					{
						"name": "Prop_44",
						"type": "String"
					},
					{
						"name": "Prop_45",
						"type": "String"
					},
					{
						"name": "Prop_46",
						"type": "String"
					},
					{
						"name": "Prop_47",
						"type": "String"
					},
					{
						"name": "Prop_48",
						"type": "String"
					},
					{
						"name": "Prop_49",
						"type": "String"
					},
					{
						"name": "Prop_50",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_calfornia_health_2010')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "california_health_2010.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COUNTY",
						"type": "String"
					},
					{
						"name": "HOSPITAL",
						"type": "String"
					},
					{
						"name": "COMMENT LETTERS",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PANCREATIC RESECTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "AAA REPAIR    (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "CRANIOTOMY (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ACUTE MYOCARDIAL INFARCTION\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "HEART FAILURE\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "ACUTE STROKE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE (Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "GI HEMORRHAGE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "HIP FRACTURE (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PNEUMONIA (Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "PCI\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "PCI\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "PCI\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "PCI\n(Outlier Ratings)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(Risk-Adjusted Mortality Rate)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(# of Deaths)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(# of Cases)",
						"type": "String"
					},
					{
						"name": "CAROTID ENDARTERECTOMY\n(Outlier Ratings)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_cust')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.json",
						"folderPath": "raw",
						"container": "venkat-de"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"email": {
							"type": "string"
						},
						"first": {
							"type": "string"
						},
						"last": {
							"type": "string"
						},
						"company": {
							"type": "string"
						},
						"created_at": {
							"type": "string"
						},
						"country": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_db_customers_24')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cust_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "cust_name",
						"type": "varchar"
					},
					{
						"name": "cust_address",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "ramana",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_db_department24')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "dep_no",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dep_name",
						"type": "varchar"
					},
					{
						"name": "dep_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "ramana",
					"table": "department"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_db_dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "dname",
						"type": "nvarchar"
					},
					{
						"name": "dloc",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "srcdata",
					"table": "dept"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_db_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empno",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ename",
						"type": "nvarchar"
					},
					{
						"name": "ejob",
						"type": "nvarchar"
					},
					{
						"name": "esalary",
						"type": "float",
						"precision": 15
					},
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "srcdata",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_fb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "facebook information.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Open",
						"type": "String"
					},
					{
						"name": "High",
						"type": "String"
					},
					{
						"name": "Low",
						"type": "String"
					},
					{
						"name": "Close",
						"type": "String"
					},
					{
						"name": "Adj Close",
						"type": "String"
					},
					{
						"name": "Volume",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_medical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Medical_Cost.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "sex",
						"type": "String"
					},
					{
						"name": "bmi",
						"type": "String"
					},
					{
						"name": "children",
						"type": "String"
					},
					{
						"name": "smoker",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "charges",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_product_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "products.json",
						"folderPath": "raw",
						"container": "venkat-de"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"vendor_id": {
							"type": "integer"
						},
						"requires_shipping": {
							"type": "boolean"
						},
						"sku": {
							"type": "string"
						},
						"taxable": {
							"type": "boolean"
						},
						"status": {
							"type": "string"
						},
						"price": {
							"type": "integer"
						},
						"vendor": {
							"type": "object",
							"properties": {
								"id": {
									"type": "integer"
								},
								"name": {
									"type": "string"
								}
							}
						},
						"details": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"track_id": {
										"type": "integer"
									},
									"name": {
										"type": "string"
									},
									"album_id": {
										"type": "integer"
									},
									"media_type_id": {
										"type": "integer"
									},
									"genre_id": {
										"type": "integer"
									},
									"composer": {
										"type": "string"
									},
									"milliseconds": {
										"type": "integer"
									},
									"bytes": {
										"type": "integer"
									},
									"unit_price": {
										"type": "number"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_retail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "online-retail-dataset.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "String"
					},
					{
						"name": "StockCode",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "InvoiceDate",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_cust')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_db_dimemployee25')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cust_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "cust_name",
						"type": "varchar"
					},
					{
						"name": "dep_no",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dep_name",
						"type": "varchar"
					},
					{
						"name": "dep_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created_date",
						"type": "date"
					},
					{
						"name": "lod_date",
						"type": "date"
					},
					{
						"name": "user_name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimemployee25"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_db_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ekey",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "empno",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ename",
						"type": "nvarchar"
					},
					{
						"name": "job",
						"type": "nvarchar"
					},
					{
						"name": "esalary",
						"type": "float",
						"precision": 15
					},
					{
						"name": "deptno",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "created_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "userid",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "tgtdata",
					"table": "dimemployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_db_org')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "banking",
					"table": "vorg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_fb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "facebook",
					"table": "csv"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_medical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "banking",
					"table": "medicai_vorg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_organizations_18')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "index_no",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "orgname",
						"type": "nvarchar"
					},
					{
						"name": "website",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "orgdesc",
						"type": "nvarchar"
					},
					{
						"name": "founded",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "industry",
						"type": "nvarchar"
					},
					{
						"name": "total_employees",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "banking",
					"table": "organization"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_product_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"email": {
							"type": "string"
						},
						"first": {
							"type": "string"
						},
						"last": {
							"type": "string"
						},
						"company": {
							"type": "string"
						},
						"created_at": {
							"type": "string"
						},
						"country": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_retail_21')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "invoiceno",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "stockcode",
						"type": "nvarchar"
					},
					{
						"name": "descriptions",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "invoicedate",
						"type": "nvarchar"
					},
					{
						"name": "unitprice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customerid",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "banking",
					"table": "onlinesales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_stagging_calfornia_health')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tht_ds_employees25')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db_adv",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ekey",
						"type": "varchar"
					},
					{
						"name": "cust_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "cust_name",
						"type": "varchar"
					},
					{
						"name": "dep_no",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dep_name",
						"type": "varchar"
					},
					{
						"name": "dep_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created_date",
						"type": "date"
					},
					{
						"name": "load_date",
						"type": "date"
					},
					{
						"name": "user_name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimemployees25"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db_adv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp1_src_org_csv1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_src_org_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_tgt_org_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_tgt_org_csv1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "(Risk-Adjusted Mortality Rate)\"",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					},
					{
						"name": "Prop_9",
						"type": "String"
					},
					{
						"name": "Prop_10",
						"type": "String"
					},
					{
						"name": "Prop_11",
						"type": "String"
					},
					{
						"name": "Prop_12",
						"type": "String"
					},
					{
						"name": "Prop_13",
						"type": "String"
					},
					{
						"name": "Prop_14",
						"type": "String"
					},
					{
						"name": "Prop_15",
						"type": "String"
					},
					{
						"name": "Prop_16",
						"type": "String"
					},
					{
						"name": "Prop_17",
						"type": "String"
					},
					{
						"name": "Prop_18",
						"type": "String"
					},
					{
						"name": "Prop_19",
						"type": "String"
					},
					{
						"name": "Prop_20",
						"type": "String"
					},
					{
						"name": "Prop_21",
						"type": "String"
					},
					{
						"name": "Prop_22",
						"type": "String"
					},
					{
						"name": "Prop_23",
						"type": "String"
					},
					{
						"name": "Prop_24",
						"type": "String"
					},
					{
						"name": "Prop_25",
						"type": "String"
					},
					{
						"name": "Prop_26",
						"type": "String"
					},
					{
						"name": "Prop_27",
						"type": "String"
					},
					{
						"name": "Prop_28",
						"type": "String"
					},
					{
						"name": "Prop_29",
						"type": "String"
					},
					{
						"name": "Prop_30",
						"type": "String"
					},
					{
						"name": "Prop_31",
						"type": "String"
					},
					{
						"name": "Prop_32",
						"type": "String"
					},
					{
						"name": "Prop_33",
						"type": "String"
					},
					{
						"name": "Prop_34",
						"type": "String"
					},
					{
						"name": "Prop_35",
						"type": "String"
					},
					{
						"name": "Prop_36",
						"type": "String"
					},
					{
						"name": "Prop_37",
						"type": "String"
					},
					{
						"name": "Prop_38",
						"type": "String"
					},
					{
						"name": "Prop_39",
						"type": "String"
					},
					{
						"name": "Prop_40",
						"type": "String"
					},
					{
						"name": "Prop_41",
						"type": "String"
					},
					{
						"name": "Prop_42",
						"type": "String"
					},
					{
						"name": "Prop_43",
						"type": "String"
					},
					{
						"name": "Prop_44",
						"type": "String"
					},
					{
						"name": "Prop_45",
						"type": "String"
					},
					{
						"name": "Prop_46",
						"type": "String"
					},
					{
						"name": "Prop_47",
						"type": "String"
					},
					{
						"name": "Prop_48",
						"type": "String"
					},
					{
						"name": "Prop_49",
						"type": "String"
					},
					{
						"name": "Prop_50",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_dev_bs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Ls_dev_bs_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('asql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_dt_st')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('asql_dt_st_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/az_db__adv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('az_db__adv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/az_db_adv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('az_db_adv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('copy_data_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_database')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('copy_database_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_db_adv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_db_adv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DB_Employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Vijay"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Src_DB_Employee",
								"type": "DatasetReference"
							},
							"name": "SrcDbEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Tgt_DB_DimEmployee",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empno as integer,",
						"          ename as string,",
						"          ejob as string,",
						"          esalary as double,",
						"          deptno as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SrcDbEmployee",
						"SrcDbEmployee derive(Get_Load_Date = currentTimestamp(),",
						"          Get_Created_Date = currentTimestamp(),",
						"          GetUser = 'SQLSERVER') ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(ekey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ekey as integer,",
						"          empno as integer,",
						"          ename as string,",
						"          job as string,",
						"          esalary as double,",
						"          deptno as integer,",
						"          created_date as timestamp,",
						"          load_date as timestamp,",
						"          userid as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ekey,",
						"          empno,",
						"          ename,",
						"          job = ejob,",
						"          esalary,",
						"          deptno,",
						"          created_date = Get_Created_Date,",
						"          load_date = Get_Load_Date,",
						"          userid = GetUser",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Src_DB_Employee')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_DB_DimEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DB_Org')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Org_src",
								"type": "DatasetReference"
							},
							"name": "SrcOrgCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DB_Tgt_Org",
								"type": "DatasetReference"
							},
							"name": "TgtOrgDBTbl"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SrcOrgCsv",
						"SrcOrgCsv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TgtOrgDBTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Org_src')]",
				"[concat(variables('factoryId'), '/datasets/DS_DB_Tgt_Org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DB_Organization')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Vijay"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Src_organization",
								"type": "DatasetReference"
							},
							"name": "SrcOrganization"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Tgt_Organization",
								"type": "DatasetReference"
							},
							"name": "TgtOrganization"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SrcOrganization",
						"SrcOrganization derive(Chng_Founded = toInteger(Founded),",
						"          Chng_Total_Employees = toInteger(Total_Employees)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          index_no as integer,",
						"          orgname as string,",
						"          website as string,",
						"          country as string,",
						"          orgdesc as string,",
						"          founded as integer,",
						"          industry as string,",
						"          total_employees as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          index_no = Index,",
						"          orgname = Name,",
						"          website = Website,",
						"          country = Country,",
						"          orgdesc = Description,",
						"          industry = Industry,",
						"          founded = Chng_Founded,",
						"          total_employees = Chng_Total_Employees",
						"     )) ~> TgtOrganization"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Src_organization')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_Organization')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DB_medical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_DB_src_medical",
								"type": "DatasetReference"
							},
							"name": "dfsrcmedical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DB_tgt_medical",
								"type": "DatasetReference"
							},
							"name": "dftgtmedical"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          age as string,",
						"          sex as string,",
						"          bmi as string,",
						"          children as string,",
						"          smoker as string,",
						"          region as string,",
						"          charges as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dfsrcmedical",
						"dfsrcmedical sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> dftgtmedical"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DB_src_medical')]",
				"[concat(variables('factoryId'), '/datasets/DS_DB_tgt_medical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DB_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_DB_src_sales",
								"type": "DatasetReference"
							},
							"name": "dbsales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DB_tgt_sales",
								"type": "DatasetReference"
							},
							"name": "dbtgtsales"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          USERID as string,",
						"          ORDERDATE as string,",
						"          ORDERID as string,",
						"          AMOUNTINFO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dbsales",
						"dbsales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> dbtgtsales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DB_src_sales')]",
				"[concat(variables('factoryId'), '/datasets/DS_DB_tgt_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_JAINER')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_srcdata_dept",
								"type": "DatasetReference"
							},
							"name": "srcdept"
						},
						{
							"dataset": {
								"referenceName": "DS_srcdata_emp",
								"type": "DatasetReference"
							},
							"name": "srcemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgtdata_dim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          deptno as integer,",
						"          dname as string,",
						"          dloc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcdept",
						"source(output(",
						"          empno as integer,",
						"          ename as string,",
						"          ejob as string,",
						"          esalary as double,",
						"          deptno as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcemp",
						"srcdept, srcemp join(srcdept@deptno == srcemp@deptno,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(create_date = currentTimestamp(),",
						"          loaddate = currentTimestamp(),",
						"          userid = 'Neelima') ~> derivedColumn1",
						"select1 keyGenerate(output(ekey1 as long),",
						"     startAt: 100L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"derivedColumn1 select(mapColumn(",
						"          deptno = srcdept@deptno,",
						"          dname,",
						"          dloc,",
						"          empno,",
						"          ename,",
						"          ejob,",
						"          esalary,",
						"          create_date,",
						"          loaddate,",
						"          userid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ekey as integer,",
						"          empno as integer,",
						"          ename as string,",
						"          job as string,",
						"          esalary as double,",
						"          deptno as integer,",
						"          created_date as timestamp,",
						"          load_date as timestamp,",
						"          userid as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ekey = ekey1,",
						"          empno,",
						"          ename,",
						"          job = ejob,",
						"          esalary,",
						"          deptno,",
						"          created_date = create_date,",
						"          load_date = loaddate,",
						"          userid",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_srcdata_dept')]",
				"[concat(variables('factoryId'), '/datasets/DS_srcdata_emp')]",
				"[concat(variables('factoryId'), '/datasets/DS_tgtdata_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_OnlineSales_DB_Exp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Vijay"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_OnlineSales_Src",
								"type": "DatasetReference"
							},
							"name": "SrcOnlinesales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Tgt_DB_Onlinesales",
								"type": "DatasetReference"
							},
							"name": "TgtOnlineSales"
						}
					],
					"transformations": [
						{
							"name": "DrvOnlineSales"
						},
						{
							"name": "SelectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InvoiceNo as string,",
						"          StockCode as string,",
						"          Description as string,",
						"          Quantity as string,",
						"          InvoiceDate as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SrcOnlinesales",
						"SrcOnlinesales derive(Chng_InvoiceNo = toInteger(InvoiceNo),",
						"          Chng_Quantity = toInteger(Quantity),",
						"          Chng_UnitPrice = toFloat(UnitPrice),",
						"          Chng_CustomerId = toInteger(CustomerID)) ~> DrvOnlineSales",
						"DrvOnlineSales select(mapColumn(",
						"          StockCode,",
						"          Description,",
						"          Country,",
						"          Chng_InvoiceNo,",
						"          Chng_Quantity,",
						"          Chng_UnitPrice,",
						"          Chng_CustomerId,",
						"          InvoiceDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          invoiceno as long,",
						"          stockcode as string,",
						"          descriptions as string,",
						"          quantity as long,",
						"          invoicedate as string,",
						"          unitprice as integer,",
						"          customerid as long,",
						"          country as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     dateFormat:'MM-dd-yyyy',",
						"     timestampFormat:'MM/dd/yyyy HH:mm:ss',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          invoiceno = Chng_InvoiceNo,",
						"          stockcode = StockCode,",
						"          descriptions = Description,",
						"          quantity = Chng_Quantity,",
						"          invoicedate = InvoiceDate,",
						"          unitprice = Chng_UnitPrice,",
						"          customerid = Chng_CustomerId,",
						"          country = Country",
						"     )) ~> TgtOnlineSales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnlineSales_Src')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_DB_Onlinesales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Org')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Org_src",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Tgt_Org",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Tgt_Organization.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Org_src')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_Org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Org_Drv_Selct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Vijay"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Src_organization",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DB_Tgt_Org",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "drvChngFoundedTotalEmp"
						},
						{
							"name": "SltOrganization"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Chg_Founded = toInteger(Founded),",
						"          Chg_TotalEmployees = toInteger(Total_Employees)) ~> drvChngFoundedTotalEmp",
						"drvChngFoundedTotalEmp select(mapColumn(",
						"          Index,",
						"          Name,",
						"          Website,",
						"          Country,",
						"          Description,",
						"          Industry,",
						"          Chg_Founded,",
						"          Chg_TotalEmployees",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SltOrganization",
						"SltOrganization sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Src_organization')]",
				"[concat(variables('factoryId'), '/datasets/DS_DB_Tgt_Org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_bank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_src_bank_csv_copy",
								"type": "DatasetReference"
							},
							"name": "Bankcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_bank_csv_copy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Bankcsv",
						"Bankcsv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_src_bank_csv_copy')]",
				"[concat(variables('factoryId'), '/datasets/DS_tgt_bank_csv_copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_bank_org')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_src_bank_org",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_tgt_bank_org",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "drvchngfoundedtalemployes"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Chng_Founded = toInteger(Founded),",
						"          Chng_TotalEmployees = toInteger(Total_Employees)) ~> drvchngfoundedtalemployes",
						"drvchngfoundedtalemployes select(mapColumn(",
						"          Index,",
						"          Name,",
						"          Website,",
						"          Country,",
						"          Description,",
						"          Industry,",
						"          Chng_Founded,",
						"          Chng_TotalEmployees",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Index,",
						"          Name,",
						"          Website,",
						"          Country,",
						"          Description,",
						"          Industry,",
						"          Chng_Founded,",
						"          Chng_TotalEmployees",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_src_bank_org')]",
				"[concat(variables('factoryId'), '/datasets/Ds_tgt_bank_org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_online_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_src_online_retail",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_online_retail",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InvoiceNo as string,",
						"          StockCode as string,",
						"          Description as string,",
						"          Quantity as string,",
						"          InvoiceDate as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Chn_invoiceno = toInteger(InvoiceNo),",
						"          Cnh_quantity = toInteger(Quantity),",
						"          Chn_customerid = toInteger(CustomerID),",
						"          Chn_unitprice = toFloat(UnitPrice)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          InvoiceNo = Chn_invoiceno,",
						"          StockCode,",
						"          Description,",
						"          Quantity = Cnh_quantity,",
						"          InvoiceDate,",
						"          UnitPrice = Chn_unitprice,",
						"          CustomerID = Chn_customerid,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          invoiceno as long,",
						"          stockcode as string,",
						"          descriptions as string,",
						"          quantity as long,",
						"          invoicedate as string,",
						"          unitprice as integer,",
						"          customerid as long,",
						"          country as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          invoiceno = InvoiceNo,",
						"          stockcode = StockCode,",
						"          descriptions = Description,",
						"          quantity = Quantity,",
						"          invoicedate = InvoiceDate,",
						"          unitprice = UnitPrice,",
						"          customerid = CustomerID,",
						"          country = Country",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_src_online_retail')]",
				"[concat(variables('factoryId'), '/datasets/DS_tgt_online_retail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_src_sales_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_sales_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          COUNTY as string,",
						"          HOSPITAL as string,",
						"          {COMMENT LETTERS} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Deaths)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Cases)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Outlier Ratings)} as string,",
						"          {PANCREATIC RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Deaths)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Cases)} as string,",
						"          {PANCREATIC RESECTION\\n(Outlier Ratings)} as string,",
						"          {AAA REPAIR\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {AAA REPAIR\\n(# of Deaths)} as string,",
						"          {AAA REPAIR\\n(# of Cases)} as string,",
						"          {AAA REPAIR    (Outlier Ratings)} as string,",
						"          {CRANIOTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CRANIOTOMY\\n(# of Deaths)} as string,",
						"          {CRANIOTOMY\\n(# of Cases)} as string,",
						"          {CRANIOTOMY (Outlier Ratings)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Deaths)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Cases)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Outlier Ratings)} as string,",
						"          {HEART FAILURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HEART FAILURE\\n(# of Deaths)} as string,",
						"          {HEART FAILURE\\n(# of Cases)} as string,",
						"          {HEART FAILURE\\n(Outlier Ratings)} as string,",
						"          {ACUTE STROKE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE STROKE\\n(# of Deaths)} as string,",
						"          {ACUTE STROKE\\n(# of Cases)} as string,",
						"          {ACUTE STROKE (Outlier Ratings)} as string,",
						"          {GI HEMORRHAGE (Risk-Adjusted Mortality Rate)} as string,",
						"          {GI HEMORRHAGE\\n(# of Deaths)} as string,",
						"          {GI HEMORRHAGE\\n(# of Cases)} as string,",
						"          {GI HEMORRHAGE (Outlier Ratings)} as string,",
						"          {HIP FRACTURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HIP FRACTURE\\n(# of Deaths)} as string,",
						"          {HIP FRACTURE\\n(# of Cases)} as string,",
						"          {HIP FRACTURE (Outlier Ratings)} as string,",
						"          {PNEUMONIA\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PNEUMONIA\\n(# of Deaths)} as string,",
						"          {PNEUMONIA\\n(# of Cases)} as string,",
						"          {PNEUMONIA (Outlier Ratings)} as string,",
						"          {PCI\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PCI\\n(# of Deaths)} as string,",
						"          {PCI\\n(# of Cases)} as string,",
						"          {PCI\\n(Outlier Ratings)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Deaths)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Cases)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Outlier Ratings)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_src_sales_csv')]",
				"[concat(variables('factoryId'), '/datasets/DS_tgt_sales_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pp_src_org_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pp_tgt_org_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp_src_org_csv')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_src_bank_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_bank_csv",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Ls_dev_bs",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_src_bank_csv')]",
				"[concat(variables('factoryId'), '/datasets/DS_tgt_bank_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_product_json",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_product_json",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Ls_dev_bs",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          vendor_id as integer,",
						"          requires_shipping as boolean,",
						"          sku as string,",
						"          taxable as boolean,",
						"          status as string,",
						"          price as integer,",
						"          vendor as (id as integer, name as string),",
						"          details as (track_id as integer, name as string, album_id as integer, media_type_id as integer, genre_id as integer, composer as string, milliseconds as integer, bytes as integer, unit_price as double)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          email as string,",
						"          first as string,",
						"          last as string,",
						"          company as string,",
						"          created_at as string,",
						"          country as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_product_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_product_json')]",
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_fb",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_fb",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Ls_dev_bs",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as string,",
						"          Open as string,",
						"          High as string,",
						"          Low as string,",
						"          Close as string,",
						"          {Adj Close} as string,",
						"          Volume as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_fb')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_fb')]",
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_medical",
								"type": "DatasetReference"
							},
							"name": "medical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_medical",
								"type": "DatasetReference"
							},
							"name": "output"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          age as string,",
						"          sex as string,",
						"          bmi as string,",
						"          children as string,",
						"          smoker as string,",
						"          region as string,",
						"          charges as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> medical",
						"medical sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_medical')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_medical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_24')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_db_customers_24",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_src_db_department24",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tht_ds_employees25",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cust_id as integer,",
						"          cust_name as string,",
						"          cust_address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          dep_no as integer,",
						"          dep_name as string,",
						"          dep_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(cust_id == dep_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(created_date = currentTimestamp(),",
						"          load_date = currentTimestamp(),",
						"          user_name = 'balaji') ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(ekey as long),",
						"     startAt: 1001L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          cust_id,",
						"          cust_name,",
						"          cust_address,",
						"          dep_no,",
						"          dep_name,",
						"          dep_id,",
						"          created_date,",
						"          load_date,",
						"          user_name,",
						"          ekey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ekey as string,",
						"          cust_id as integer,",
						"          cust_name as string,",
						"          dep_no as integer,",
						"          dep_name as string,",
						"          dep_id as integer,",
						"          created_date as date,",
						"          load_date as date,",
						"          user_name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ekey,",
						"          cust_id,",
						"          cust_name,",
						"          dep_no,",
						"          dep_name,",
						"          dep_id,",
						"          created_date,",
						"          load_date,",
						"          user_name",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_db_customers_24')]",
				"[concat(variables('factoryId'), '/datasets/ds_src_db_department24')]",
				"[concat(variables('factoryId'), '/datasets/ds_tht_ds_employees25')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_calfornia_health_2010')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_calfornia_health_2010",
								"type": "DatasetReference"
							},
							"name": "Srccalforniahealth2010"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_stagging_calfornia_health",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          COUNTY as string,",
						"          HOSPITAL as string,",
						"          {COMMENT LETTERS} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Deaths)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Cases)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Outlier Ratings)} as string,",
						"          {PANCREATIC RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Deaths)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Cases)} as string,",
						"          {PANCREATIC RESECTION\\n(Outlier Ratings)} as string,",
						"          {AAA REPAIR\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {AAA REPAIR\\n(# of Deaths)} as string,",
						"          {AAA REPAIR\\n(# of Cases)} as string,",
						"          {AAA REPAIR    (Outlier Ratings)} as string,",
						"          {CRANIOTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CRANIOTOMY\\n(# of Deaths)} as string,",
						"          {CRANIOTOMY\\n(# of Cases)} as string,",
						"          {CRANIOTOMY (Outlier Ratings)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Deaths)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Cases)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Outlier Ratings)} as string,",
						"          {HEART FAILURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HEART FAILURE\\n(# of Deaths)} as string,",
						"          {HEART FAILURE\\n(# of Cases)} as string,",
						"          {HEART FAILURE\\n(Outlier Ratings)} as string,",
						"          {ACUTE STROKE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE STROKE\\n(# of Deaths)} as string,",
						"          {ACUTE STROKE\\n(# of Cases)} as string,",
						"          {ACUTE STROKE (Outlier Ratings)} as string,",
						"          {GI HEMORRHAGE (Risk-Adjusted Mortality Rate)} as string,",
						"          {GI HEMORRHAGE\\n(# of Deaths)} as string,",
						"          {GI HEMORRHAGE\\n(# of Cases)} as string,",
						"          {GI HEMORRHAGE (Outlier Ratings)} as string,",
						"          {HIP FRACTURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HIP FRACTURE\\n(# of Deaths)} as string,",
						"          {HIP FRACTURE\\n(# of Cases)} as string,",
						"          {HIP FRACTURE (Outlier Ratings)} as string,",
						"          {PNEUMONIA\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PNEUMONIA\\n(# of Deaths)} as string,",
						"          {PNEUMONIA\\n(# of Cases)} as string,",
						"          {PNEUMONIA (Outlier Ratings)} as string,",
						"          {PCI\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PCI\\n(# of Deaths)} as string,",
						"          {PCI\\n(# of Cases)} as string,",
						"          {PCI\\n(Outlier Ratings)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Deaths)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Cases)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Outlier Ratings)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Srccalforniahealth2010",
						"Srccalforniahealth2010 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['tgt_health_2010.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_calfornia_health_2010')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_stagging_calfornia_health')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_california_health_2010')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Src_California_health_2010",
								"type": "DatasetReference"
							},
							"name": "Srccaliforniahealth2010"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_stagging_california_health",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          COUNTY as string,",
						"          HOSPITAL as string,",
						"          {COMMENT LETTERS} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Deaths)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Cases)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Outlier Ratings)} as string,",
						"          {PANCREATIC RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Deaths)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Cases)} as string,",
						"          {PANCREATIC RESECTION\\n(Outlier Ratings)} as string,",
						"          {AAA REPAIR\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {AAA REPAIR\\n(# of Deaths)} as string,",
						"          {AAA REPAIR\\n(# of Cases)} as string,",
						"          {AAA REPAIR    (Outlier Ratings)} as string,",
						"          {CRANIOTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CRANIOTOMY\\n(# of Deaths)} as string,",
						"          {CRANIOTOMY\\n(# of Cases)} as string,",
						"          {CRANIOTOMY (Outlier Ratings)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Deaths)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Cases)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Outlier Ratings)} as string,",
						"          {HEART FAILURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HEART FAILURE\\n(# of Deaths)} as string,",
						"          {HEART FAILURE\\n(# of Cases)} as string,",
						"          {HEART FAILURE\\n(Outlier Ratings)} as string,",
						"          {ACUTE STROKE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE STROKE\\n(# of Deaths)} as string,",
						"          {ACUTE STROKE\\n(# of Cases)} as string,",
						"          {ACUTE STROKE (Outlier Ratings)} as string,",
						"          {GI HEMORRHAGE (Risk-Adjusted Mortality Rate)} as string,",
						"          {GI HEMORRHAGE\\n(# of Deaths)} as string,",
						"          {GI HEMORRHAGE\\n(# of Cases)} as string,",
						"          {GI HEMORRHAGE (Outlier Ratings)} as string,",
						"          {HIP FRACTURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HIP FRACTURE\\n(# of Deaths)} as string,",
						"          {HIP FRACTURE\\n(# of Cases)} as string,",
						"          {HIP FRACTURE (Outlier Ratings)} as string,",
						"          {PNEUMONIA\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PNEUMONIA\\n(# of Deaths)} as string,",
						"          {PNEUMONIA\\n(# of Cases)} as string,",
						"          {PNEUMONIA (Outlier Ratings)} as string,",
						"          {PCI\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PCI\\n(# of Deaths)} as string,",
						"          {PCI\\n(# of Cases)} as string,",
						"          {PCI\\n(Outlier Ratings)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Deaths)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Cases)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Outlier Ratings)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Srccaliforniahealth2010",
						"Srccaliforniahealth2010 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['tgt_health_2010.csv'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Src_California_health_2010')]",
				"[concat(variables('factoryId'), '/datasets/DS_tgt_stagging_california_health')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_db_vorg_15042023')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Org_src",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_db_org",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Org_src')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_db_org')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_join_dept_customers25')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_db_customers_24",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_src_db_department24",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_db_dimemployee25",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cust_id as integer,",
						"          cust_name as string,",
						"          cust_address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          dep_no as integer,",
						"          dep_name as string,",
						"          dep_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(cust_id == dep_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(create_date = currentTimestamp(),",
						"          load_date = currentTimestamp(),",
						"          user_name = 'pream') ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          cust_id,",
						"          cust_name,",
						"          cust_address,",
						"          dep_no,",
						"          dep_name,",
						"          dep_id,",
						"          create_date,",
						"          load_date,",
						"          user_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          cust_id as integer,",
						"          cust_name as string,",
						"          dep_no as integer,",
						"          dep_name as string,",
						"          dep_id as integer,",
						"          created_date as date,",
						"          lod_date as date,",
						"          user_name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          cust_name,",
						"          dep_no,",
						"          dep_name,",
						"          dep_id,",
						"          created_date = create_date,",
						"          lod_date = load_date,",
						"          user_name",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_db_customers_24')]",
				"[concat(variables('factoryId'), '/datasets/ds_src_db_department24')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_db_dimemployee25')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_join_dept_employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_db_dept",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_src_db_emp",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Tgt_DB_DimEmployee",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Ls_dev_bs",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          deptno as integer,",
						"          dname as string,",
						"          dloc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          empno as integer,",
						"          ename as string,",
						"          ejob as string,",
						"          esalary as double,",
						"          deptno as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(source1@deptno == source2@deptno,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(create_date = currentTimestamp(),",
						"          load_date = currentTimestamp(),",
						"          user_id = 'venkat') ~> derivedColumn1",
						"select1 keyGenerate(output(ekey as long),",
						"     startAt: 100L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"derivedColumn1 select(mapColumn(",
						"          deptno = source1@deptno,",
						"          dname,",
						"          dloc,",
						"          empno,",
						"          ename,",
						"          ejob,",
						"          esalary,",
						"          create_date,",
						"          load_date,",
						"          user_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ekey as integer,",
						"          empno as integer,",
						"          ename as string,",
						"          job as string,",
						"          esalary as double,",
						"          deptno as integer,",
						"          created_date as timestamp,",
						"          load_date as timestamp,",
						"          userid as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ekey,",
						"          empno,",
						"          ename,",
						"          job = ejob,",
						"          esalary,",
						"          deptno,",
						"          created_date = create_date,",
						"          load_date,",
						"          userid = user_id",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_db_dept')]",
				"[concat(variables('factoryId'), '/datasets/ds_src_db_emp')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_DB_DimEmployee')]",
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_new')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pp_src_org_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_organizations_18",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(chng_founded = toInteger(Founded),",
						"          Chag_TotalEmployees = toInteger(Total_Employees)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Index,",
						"          Name,",
						"          Website,",
						"          Country,",
						"          Description,",
						"          Industry,",
						"          chng_founded,",
						"          Chag_TotalEmployees",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          index_no as integer,",
						"          orgname as string,",
						"          website as string,",
						"          country as string,",
						"          orgdesc as string,",
						"          founded as integer,",
						"          industry as string,",
						"          total_employees as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          index_no = Index,",
						"          orgname = Name,",
						"          website = Website,",
						"          country = Country,",
						"          orgdesc = Description,",
						"          founded = chng_founded,",
						"          industry = Industry,",
						"          total_employees = Chag_TotalEmployees",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp_src_org_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_organizations_18')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_retail_21')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_retail",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_retail_21",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InvoiceNo as string,",
						"          StockCode as string,",
						"          Description as string,",
						"          Quantity as string,",
						"          InvoiceDate as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(ch_invoiceno = toInteger(InvoiceNo),",
						"          ch_unitprice = toFloat(UnitPrice),",
						"          ch_quantity = toInteger(Quantity),",
						"          ch_customerid = toInteger(CustomerID),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          StockCode,",
						"          Description,",
						"          InvoiceDate,",
						"          Country,",
						"          ch_invoiceno,",
						"          ch_unitprice,",
						"          ch_quantity,",
						"          ch_customerid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          invoiceno as long,",
						"          stockcode as string,",
						"          descriptions as string,",
						"          quantity as long,",
						"          invoicedate as string,",
						"          unitprice as integer,",
						"          customerid as long,",
						"          country as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          invoiceno = ch_invoiceno,",
						"          stockcode = StockCode,",
						"          descriptions = Description,",
						"          quantity = ch_quantity,",
						"          invoicedate = InvoiceDate,",
						"          unitprice = ch_unitprice,",
						"          customerid = ch_customerid,",
						"          country = Country",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_retail')]",
				"[concat(variables('factoryId'), '/datasets/ds_tgt_retail_21')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_df_org_csv1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pp1_src_org_csv1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pp_tgt_org_csv1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Ls_dev_bs",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {(Risk-Adjusted Mortality Rate)\"} as string,",
						"          {ESOPHAGEAL RESECTION} as string,",
						"          Prop_2 as string,",
						"          Prop_3 as string,",
						"          Prop_4 as string,",
						"          Prop_5 as string,",
						"          Prop_6 as string,",
						"          Prop_7 as string,",
						"          Prop_8 as string,",
						"          Prop_9 as string,",
						"          Prop_10 as string,",
						"          Prop_11 as string,",
						"          Prop_12 as string,",
						"          Prop_13 as string,",
						"          Prop_14 as string,",
						"          Prop_15 as string,",
						"          Prop_16 as string,",
						"          Prop_17 as string,",
						"          Prop_18 as string,",
						"          Prop_19 as string,",
						"          Prop_20 as string,",
						"          Prop_21 as string,",
						"          Prop_22 as string,",
						"          Prop_23 as string,",
						"          Prop_24 as string,",
						"          Prop_25 as string,",
						"          Prop_26 as string,",
						"          Prop_27 as string,",
						"          Prop_28 as string,",
						"          Prop_29 as string,",
						"          Prop_30 as string,",
						"          Prop_31 as string,",
						"          Prop_32 as string,",
						"          Prop_33 as string,",
						"          Prop_34 as string,",
						"          Prop_35 as string,",
						"          Prop_36 as string,",
						"          Prop_37 as string,",
						"          Prop_38 as string,",
						"          Prop_39 as string,",
						"          Prop_40 as string,",
						"          Prop_41 as string,",
						"          Prop_42 as string,",
						"          Prop_43 as string,",
						"          Prop_44 as string,",
						"          Prop_45 as string,",
						"          Prop_46 as string,",
						"          Prop_47 as string,",
						"          Prop_48 as string,",
						"          Prop_49 as string,",
						"          Prop_50 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp1_src_org_csv1')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv1')]",
				"[concat(variables('factoryId'), '/linkedServices/Ls_dev_bs')]"
			]
		}
	]
}